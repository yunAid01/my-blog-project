import { Test, TestingModule } from '@nestjs/testing';

// user dto
import { CreateUserDto } from './dto/create-user.dto';
import { LoginUserDto } from './dto/login-user.dto';

// real
import { UserService } from './user.service';
import { PrismaService } from 'src/prisma/prisma.service';
import { JwtService } from '@nestjs/jwt'; // 1. 'ÏßÑÏßú ÌÜ†ÌÅ∞ Î∞úÍ∏âÍ∏∞' ÏÑ§Í≥ÑÎèÑ import
import * as bcrypt from 'bcrypt'; // 1. 'ÏßÑÏßú' bcrypt Í∞ÄÏ†∏Ïò§Í∏∞

import {
  BadRequestException,
  ForbiddenException,
  NotFoundException,
  UnauthorizedException,
} from '@nestjs/common';

import { PublicUser } from '@my-blog/types';
import { UpdateUserDto } from './dto/update-user.dto';

// 2. üö® "Ïù¥ ÌååÏùºÏóêÏÑú 'bcrypt'Î•º Î∂ÄÎ•¥Î©¥, 'Í∞ÄÏßú'Î•º Ï§ò!"ÎùºÍ≥† ÏÑ†Ïñ∏!
jest.mock('bcrypt', () => ({
  compare: jest.fn(), // 'compare' Ìï®ÏàòÎ•º 'Í∞ÄÏßú'Î°ú ÎßåÎì¶
  hash: jest.fn(), // 'hash' Ìï®ÏàòÎèÑ 'Í∞ÄÏßú'Î°ú ÎßåÎì¶
}));

const mockPrismaService = {
  user: {
    create: jest.fn(),
    findUnique: jest.fn(),
    findMany: jest.fn(),
    update: jest.fn(),
    delete: jest.fn(),
  },
};

// --- üéüÔ∏è 'Í∞ÄÏßú ÌÜ†ÌÅ∞ Î∞úÍ∏âÍ∏∞' ÎßåÎì§Í∏∞ ---
const mockJwtService = {
  sign: jest.fn(),
  // (ÌïÑÏöîÌïú Ìï®ÏàòÍ∞Ä Îçî ÏûàÏúºÎ©¥ ÎÇòÏ§ëÏóê Ï∂îÍ∞Ä)
};

describe('UserService', () => {
  let service: UserService;

  // --- "Í∞ÄÏßú Îç∞Ïù¥ÌÑ∞" Í∑∏Î¶á Ï§ÄÎπÑ! (let) ---
  // Ïù¥ Î≥ÄÏàòÎì§ÏùÄ Î™®Îì† 'it' Î∏îÎ°ùÏóêÏÑú Ïû¨ÏÇ¨Ïö©Îê©ÎãàÎã§.
  let mockUserCreateData: CreateUserDto;
  let mockUserLoginData: LoginUserDto;
  let mockUserUpdateData: UpdateUserDto;
  let mockLoginedPublicUser: PublicUser;
  let fakeHashedPassword: string;
  let fakeUserDbResult;
  let fakeToken: string;

  beforeEach(async () => {
    const module: TestingModule = await Test.createTestingModule({
      providers: [
        UserService, // Ï£ºÏù∏Í≥µ(ÏßÑÏßú Î°úÏßÅ)
        {
          provide: PrismaService,
          useValue: mockPrismaService,
        },
        {
          provide: JwtService,
          useValue: mockJwtService,
        },
      ],
    }).compile();
    service = module.get<UserService>(UserService); // real

    // --- üëá "Í∞ÄÏßú Îç∞Ïù¥ÌÑ∞" Ï¥àÍ∏∞Ìôî! (beforeEach) ---
    // Îß§ ÏãúÌóò(it) Ï†ÑÏóê 'ÏÉàÎ°úÏö¥' Í∞ÄÏßú Îç∞Ïù¥ÌÑ∞Î•º ÎßåÎì§Ïñ¥ÏÑú
    // ÏãúÌóòÎÅºÎ¶¨ ÏÑúÎ°ú ÏòÅÌñ•ÏùÑ Ï£ºÏßÄ ÏïäÍ≤å Ìï©ÎãàÎã§.
    fakeHashedPassword = 'db-Ïóê-Ï†ÄÏû•Îêú-Ìï¥ÏãúÎπÑÎ≤à-Î™®Ïñë';
    fakeToken = 'this-is-a-fake-token-string';
    mockUserCreateData = {
      email: 'test@email.com',
      nickname: 'tester',
      password: '1234',
    };
    mockUserLoginData = {
      email: 'test@email.com',
      password: '1234',
    };
    mockUserUpdateData = {
      email: 'jiwon@email.com',
      nickname: 'testerian',
    };
    fakeUserDbResult = {
      id: 1,
      email: 'test@email.com',
      nickname: 'tester',
      password: fakeHashedPassword,
      createdAt: new Date('2025-01-01T10:00:00.000Z'),
      updatedAt: new Date('2025-01-01T10:00:00.000Z'),
    };
    mockLoginedPublicUser = {
      id: 1,
      email: 'test@email.com',
      nickname: 'tester',
      createdAt: '2025-01-01T10:00:00.000Z',
      updatedAt: '2025-01-01T10:00:00.000Z',
    };
  });

  // (afterEach Ï∂îÍ∞Ä - ÌïÑÏàò!)
  afterEach(() => {
    jest.clearAllMocks(); // 'Í∞ÄÏßú' Î∞∞Ïö∞Îì§Ïùò Î©îÎ™®Î¶¨Î•º Íπ®ÎÅóÏù¥ Ï≤≠ÏÜå!
  });

  it('should be defined (Ï†ïÏùò ÎêòÏñ¥Ïïº Ìï®)', () => {
    expect(service).toBeDefined();
  });

  // ---------------------------------------------
  // ÌöåÏõêÍ∞ÄÏûÖ (createUser)
  // ---------------------------------------------

  describe('user register', () => {
    it('should create new user with register data (ÌöåÏõêÍ∞ÄÏûÖ ÏÑ±Í≥µ)', async () => {
      const expectedServiceResult = {
        // ÏµúÏ¢ÖÎ¶¨ÌÑ¥
        id: 1,
        email: 'test@email.com',
        nickname: 'tester',
        createdAt: '2025-01-01T10:00:00.000Z',
        updatedAt: '2025-01-01T10:00:00.000Z',
      };

      (bcrypt.hash as jest.Mock).mockResolvedValue(fakeHashedPassword); // fake
      mockPrismaService.user.create.mockResolvedValue(fakeUserDbResult); // fake

      // Í≤ÄÏ¶ù
      const result = await service.createUser(mockUserCreateData);
      expect(result).toEqual(expectedServiceResult);
      expect(mockPrismaService.user.create).toHaveBeenCalledWith({
        data: {
          email: mockUserCreateData.email,
          nickname: mockUserCreateData.nickname,
          // "ÎπÑÎ∞ÄÎ≤àÌò∏Îäî '1234'Í∞Ä ÏïÑÎãå(not.stringContaining),
          //  'Ïñ¥Îñ§ Î¨∏ÏûêÏó¥(any(String))'Ïù¥ Îì§Ïñ¥Í∞îÏñ¥Ïïº Ìï¥!"
          password: expect.not.stringContaining(
            mockUserCreateData.password,
          ) as string,
        },
      });
    });

    it('should have email & password & nickname data for register (ÌöåÏõêÍ∞ÄÏûÖ Ïã§Ìå®)', async () => {
      const mockFailedUserCreateData = {
        // ÏùºÎ∂ÄÎü¨ ÌãÄÎ¶∞ Îç∞Ïù¥ÌÑ∞ ÎÑ£Ïùå
        email: 'test@email.com',
        password: '1234',
      };
      await expect(
        service.createUser(mockFailedUserCreateData as any),
      ).rejects.toThrow(BadRequestException);
    });
  });

  // ---------------------------------------------
  // Î°úÍ∑∏Ïù∏ (login)
  // ---------------------------------------------
  describe('user login', () => {
    it('should provide access token and user data when user is logging (Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ)', async () => {
      const expectedServiceResult = {
        message: 'Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ',
        accessToken: fakeToken,
        user: {
          id: 1,
          email: 'test@email.com',
          nickname: 'tester',
          createdAt: '2025-01-01T10:00:00.000Z',
          updatedAt: '2025-01-01T10:00:00.000Z',
        },
      };
      //fake
      mockPrismaService.user.findUnique.mockResolvedValue(fakeUserDbResult);
      (bcrypt.compare as jest.Mock).mockResolvedValue(true);
      mockJwtService.sign.mockReturnValue(fakeToken);

      // real
      const result = await service.login(mockUserLoginData);
      expect(result).toEqual(expectedServiceResult);

      // Í≥ºÏ†ïÍ≤ÄÏ¶ù 1
      expect(mockPrismaService.user.findUnique).toHaveBeenCalledWith({
        where: { email: mockUserLoginData.email },
      });

      // Í≥ºÏ†ïÍ≤ÄÏ¶ù 2
      expect(bcrypt.compare).toHaveBeenCalledWith(
        mockUserLoginData.password, // '1234'
        fakeHashedPassword, // 'db-Ïóê-Ï†ÄÏû•Îêú-Ìï¥ÏãúÎπÑÎ≤à-Î™®Ïñë'
      );

      // Í≥ºÏ†ïÍ≤ÄÏ¶ù 3
      // accessToken Î∞úÍ∏âÍ≥ºÏ†ïÏóêÏÑú Ïò¨Î∞îÎ•∏ Ï†ïÎ≥¥Î•º Î∂àÎü¨ÎÉàÎÇò?
      expect(mockJwtService.sign).toHaveBeenCalledWith({
        email: fakeUserDbResult.email,
        sub: fakeUserDbResult.id,
      });
    });

    it('should throw NotFoundException if user does not exist (Î°úÍ∑∏Ïù∏ Ïã§Ìå® - ÏóÜÎäî Ïú†Ï†Ä)', async () => {
      mockPrismaService.user.findUnique.mockResolvedValue(null);

      await expect(
        service.login(mockUserLoginData), // 2-1. 'ÏßÑÏßú ÏÖ∞ÌîÑ' Ïó∞Í∏∞ ÏãúÏûë
      ).rejects.toThrow(UnauthorizedException); // 2-2. 'ÏóêÎü¨'Í∞Ä ÌÑ∞ÏßÄÎäîÏßÄ Í≤ÄÏÇ¨

      // 3. "Í≥ºÏ†ï" Í≤ÄÏ¶ù (Then) - (ÏÑ†ÌÉù ÏÇ¨Ìï≠)
      // "ÌòπÏãúÎùºÎèÑ ÌÜ†ÌÅ∞ Î∞úÍ∏âÍ∏∞Í∞Ä Ìò∏Ï∂úÎêòÏßÑ ÏïäÏïòÍ≤†ÏßÄ?" (ÎãπÏó∞Ìûà Ïïà ÎêêÏñ¥Ïïº Ìï®)
      expect(mockJwtService.sign).not.toHaveBeenCalled();
    });

    it('should throw NotFoundException if password is not valid (Î°úÍ∑∏Ïù∏ Ïã§Ìå® - ÎπÑÎ≤à ÌãÄÎ¶º)', async () => {
      mockPrismaService.user.findUnique.mockResolvedValue(fakeUserDbResult);
      (bcrypt.compare as jest.Mock).mockResolvedValue(false);

      // result
      await expect(service.login(mockUserLoginData)).rejects.toThrow(
        UnauthorizedException,
      );

      // process validation
      expect(mockJwtService.sign).not.toHaveBeenCalled();
    });
  });

  // ---------------------------------------------
  // Ïú†Ï†Ä ÏóÖÎç∞Ïù¥Ìä∏ (updateUser)
  // ---------------------------------------------
  describe('user update', () => {
    it('should return success when user is successfully updated (Ïú†Ï†Ä ÏóÖÎç∞Ïù¥Ìä∏ ÏÑ±Í≥µ)', async () => {
      const paramUserId = 1;
      mockPrismaService.user.update.mockResolvedValue({
        ...fakeUserDbResult,
        email: mockUserUpdateData.email,
        nickname: mockUserUpdateData.nickname,
      });
      const expectedServiceResult = {
        id: mockLoginedPublicUser.id,
        email: mockUserUpdateData.email,
        nickname: mockUserUpdateData.nickname,
        createdAt: mockLoginedPublicUser.createdAt,
        updatedAt: mockLoginedPublicUser.updatedAt,
      };
      const result = await service.updateUser(
        paramUserId,
        mockLoginedPublicUser,
        mockUserUpdateData,
      );
      expect(result).toEqual(expectedServiceResult);

      //Í≥ºÏ†ï
      expect(mockPrismaService.user.update).toHaveBeenCalledWith({
        where: { id: paramUserId },
        data: mockUserUpdateData,
      });
    });

    it('should allow only the user to update their own profile (Ïú†Ï†Ä ÏóÖÎç∞Ïù¥Ìä∏ Ïã§Ìå®)', async () => {
      const paramUserId = 2; // axios.patch(user/2)
      await expect(
        service.updateUser(
          paramUserId,
          mockLoginedPublicUser, // login user ID = 1
          mockUserUpdateData,
        ),
      ).rejects.toThrow(UnauthorizedException);
    });
  });
});
