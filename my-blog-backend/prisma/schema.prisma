// datasource와 generator는 데이터베이스 종류와 Prisma Client 설정을 담당합니다.
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}


// ==========================================
//           User (사용자) 모델
// ==========================================
model User {
  // 기본 키 (Primary Key): 사용자를 구분하는 고유한 번호
  id        Int      @id @default(autoincrement())
  nickname  String   @unique
  email     String   @unique
  
  // 암호화되어 저장될 비밀번호
  password  String
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- [관계 필드] ---
  // 이 사용자가 작성한 게시글 목록을 나타내는 가상 필드입니다.
  // Post[]는 Post 모델의 배열을 의미합니다.
  // 이 필드는 DB 테이블에는 존재하지 않지만, Prisma를 통해 user.posts 형태로 
  // 이 사용자가 쓴 모든 글에 쉽게 접근할 수 있게 해줍니다.
  posts     Post[]
  comments  Comment[]
  likes     Like[]

  // follow
  followings  Follow[] @relation("userIsFollwing")
  followers   Follow[] @relation("userIsFollowed")
}


// ==========================================
//           Post (게시글) 모델
// ==========================================
model Post {
  // 기본 키 (Primary Key): 게시글을 구분하는 고유한 번호
  id        Int      @id @default(autoincrement())
  
  title     String
  content   String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // --- [관계 필드] ---
  // 이 게시글의 작성자를 나타내는 필드입니다.
  // @relation은 관계를 명시합니다.
  //   - fields: [authorId] -> 이 Post 모델의 'authorId' 필드를 사용하여 관계를 맺습니다.
  //   - references: [id]   -> 저 위 User 모델의 'id' 필드를 참조합니다.
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int

  comments   Comment[]
  likes      Like[]
}

// ==========================================
//          Comment (댓글) 모델
// ==========================================
model Comment {
  id         Int      @id @default(autoincrement())
  text       String  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // relation(user)
  author     User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId   Int     
  
  // relation(post)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int     
}

// ==========================================
//          Like (좋아요) 모델
// ==========================================
model Like {
  // relation (user)
  author     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int     

  // relation (post)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId     Int    

  // 복합 key
  @@id([userId, postId])   
}

// ==========================================
//          Follow (유저 연결) 모델
// ==========================================

model Follow {
  // 팔로잉 하는
  following     User   @relation(name: "userIsFollwing", fields: [followingId], references: [id], onDelete: Cascade)
  followingId   Int     

  // 팔로잉 당하는
  followed      User   @relation(name: "userIsFollowed", fields: [followedId], references: [id], onDelete: Cascade)
  followedId    Int 

  // 복합 key
  @@id([followingId, followedId])
}