// 이 파일은 데이터베이스와의 연결을 설정하고,
// 데이터베이스에 어떤 테이블을 만들지 정의하는 Prisma의 핵심 설계도입니다.

// 1. 데이터베이스 연결 설정
// provider: 어떤 종류의 데이터베이스를 사용할지 명시합니다. (sqlite는 파일 기반의 가벼운 데이터베이스)
// url: 데이터베이스 파일의 위치를 지정합니다. .env 파일에 정의된 변수를 사용합니다.
datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// 2. Prisma Client 생성 설정
// generator: Prisma가 우리 NestJS 코드(TypeScript)에서 사용할 수 있는 코드를 생성하도록 설정합니다.
generator client {
  provider = "prisma-client-js"
}



// 3. '게시글(Post)' 데이터 모델 정의
// model Post {...} : 데이터베이스에 'Post'라는 이름의 테이블을 만들겠다는 선언입니다.
// 각 줄은 테이블의 '열(column)'을 의미합니다.
model Post {
  // @id: 이 필드가 이 테이블의 고유 식별자(Primary Key)임을 나타냅니다.
  // @default(autoincrement()): 데이터가 생성될 때마다 1씩 자동으로 증가하는 숫자를 기본값으로 설정합니다.
  id        Int      @id @default(autoincrement())

  // title: 게시글의 제목. String은 문자열 타입을 의미합니다.
  title     String

  // content: 게시글의 내용. '?'는 이 필드가 비어있어도 괜찮음(Optional)을 의미합니다.
  content   String?

  // @default(now()): 데이터가 생성될 때의 시간이 자동으로 기록됩니다.
  createdAt DateTime @default(now())

  // @updatedAt: 데이터가 업데이트될 때마다 시간이 자동으로 갱신됩니다.
  updatedAt DateTime @updatedAt
}


// '사용자(User)' 데이터 모델을 정의합니다.
// 이 모델을 바탕으로 데이터베이스에 'User' 테이블이 생성됩니다.
model User {
  // @id: 고유 식별자(Primary Key), @default(autoincrement()): 1씩 자동 증가
  id        Int      @id @default(autoincrement())

  // @unique: 이메일은 유일해야 하므로(로그인 ID로 사용), 중복될 수 없다는 'unique' 제약조건을 추가합니다.
  // 이 제약조건 덕분에 데이터베이스는 동일한 이메일이 두 번 저장되는 것을 막아줍니다.
  email     String   @unique

  // 비밀번호 필드입니다. 다음 단계에서 이 필드에 암호화된 문자열을 저장할 겁니다.
  password  String

  // @default(now()): 데이터 생성 시 현재 시간이 자동으로 기록됩니다.
  createdAt DateTime @default(now())

  // @updatedAt: 데이터 업데이트 시 시간이 자동으로 갱신됩니다.
  updatedAt DateTime @updatedAt
}